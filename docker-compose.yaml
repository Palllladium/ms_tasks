services:

  ### --- AUTH SERVICE ---

  auth_service:
    container_name: auth_service
    build:
      context: ./auth_service
    ports:
      - "8000:8000"
    env_file: .env
    depends_on:
      auth_postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./shared:/app/shared
      - ./certs:/app/certs
    networks:
      - app-network

  auth_postgres:
    image: postgres:14
    container_name: auth_postgres
    environment:
      - POSTGRES_USER=${AUTH_POSTGRES_USER}
      - POSTGRES_PASSWORD=${AUTH_POSTGRES_PASSWORD}
      - POSTGRES_DB=${AUTH_POSTGRES_DB}
    ports:
      - "5433:5432"
    volumes:
      - auth_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d users_db"]
      interval: 10s
      timeout: 5s
      retries: 4
    networks:
      - app-network

  redis:
    image: redis:latest
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$REDIS_PASSWORD", "ping"]
      interval: 10s
      timeout: 5s
      retries: 4
    networks:
      - app-network
  
  ### --- PURCHASE SERVICE ---

  purchase_service:
    container_name: purchase_service
    build: 
      context: ./purchase_service
    ports:
      - "8003:8000"
    env_file: .env
    depends_on:
      products_postgres:
        condition: service_healthy
    volumes:
      - ./shared:/app/shared
    networks:
      - app-network
  
  products_postgres:
    image: postgres:14
    container_name: products_postgres
    environment:
      - POSTGRES_USER=${PRODUCTS_POSTGRES_USER}
      - POSTGRES_PASSWORD=${PRODUCTS_POSTGRES_PASSWORD}
      - POSTGRES_DB=${PRODUCTS_POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - products_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d products_db"]
      interval: 10s
      timeout: 5s
      retries: 4
      start_period: 10s
    networks:
      - app-network

  ### --- SEARCH SERVICE ---

  search_service:
    container_name: search_service
    build: 
      context: ./search_service
    ports:
      - "8001:8001"
    env_file: .env
    depends_on:
      elasticsearch:
        condition: service_healthy
    volumes:
      - ./shared:/app/shared
    networks:
      - app-network
  
  elasticsearch:
    image: elasticsearch:8.12.1
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - logger.level=ERROR
      - TINI_SUBREAPER=true
      - TZ=UTC
    ports:
      - "9200:9200"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    healthcheck:
      test: curl --fail http://localhost:9200/_cluster/health || exit 1
      interval: 10s
      timeout: 5s
      retries: 4
      start_period: 10s
    init: true
    networks:
      - app-network

  ### --- ETL PROCESS ---
  
  etl_process:
    container_name: etl_process
    build:
      context: ./etl_process
    env_file: .env
    depends_on:
      products_postgres:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./shared:/app/shared
    networks:
      - app-network

  ### --- ADMIN PANEL ---

  admin_panel:
    container_name: admin_panel
    build:
      context: ./admin_panel
    ports:
      - "8002:8002"
    env_file: .env
    depends_on:
      products_postgres:
        condition: service_healthy
    volumes:
      - ./shared:/app/shared
    networks:
      - app-network

volumes:
  products_postgres_data:
  auth_postgres_data:
  redis_data:
  es_data:

networks:
  app-network:
    driver: bridge